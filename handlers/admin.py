
from aiogram.filters import Command
from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from data_base import sqlite_db
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from keyboards import admin_kb, kb_client

ADMIN_IDS = [879112769]  

class FSMAdmin(StatesGroup):
    photo = State()
    name = State()
    description = State()
    price = State()

async def make_changes_command(message: types.Message):
    print(f"üîç –ö–æ–º–∞–Ω–¥–∞ /moderator –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    print(f"üîç –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ ID: {ADMIN_IDS}")
    print(f"üîç –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∞: {admin_kb.button_case_admin}")
    
    if message.from_user.id in ADMIN_IDS:
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")
        try:
            await message.answer(
                '‚úÖ –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
                reply_markup=admin_kb.button_case_admin
            ) 
            print("‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
            await message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∫–∏')
    else:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º")
        await message.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')

async def cm_start(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMIN_IDS:
        await state.set_state(FSMAdmin.photo)
        await message.reply('–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ', reply_markup=admin_kb.button_case_admin)

async def cancel_handler(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMIN_IDS:
        current_state = await state.get_state()
        if current_state is not None:
            await state.clear()
            print(f"üîµ –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        # ‚úÖ –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –æ—Å—Ç–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        await message.answer(
            '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.', 
            reply_markup=admin_kb.button_case_admin  # –û—Å—Ç–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        print(f"üîµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Å—Ç–∞–ª—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

async def cancel_handler(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMIN_IDS:
        current_state = await state.get_state()
        if current_state is not None:
            await state.clear()
            print(f"üîµ –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        # ‚úÖ –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –æ—Å—Ç–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        await message.answer(
            '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.', 
            reply_markup=admin_kb.button_case_admin  # –û—Å—Ç–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        print(f"üîµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Å—Ç–∞–ª—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

async def exit_admin_mode(message: types.Message, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º—É –º–µ–Ω—é"""
    if message.from_user.id in ADMIN_IDS:
        await state.clear()
        from keyboards.client_kb import kb_client  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        
        await message.answer(
            'üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é.',
            reply_markup=kb_client
        )
        print(f"üîµ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã—à–µ–ª –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

async def load_photo(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMIN_IDS:
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º file_id
        file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
        await state.update_data(photo=file_id)
        await state.set_state(FSMAdmin.name)
        await message.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ")

async def load_name(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMIN_IDS:
        await state.update_data(name=message.text)
        await state.set_state(FSMAdmin.description)
        await message.reply("–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ", reply_markup=admin_kb.button_case_admin)

async def load_description(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMIN_IDS:
        await state.update_data(description=message.text)
        await state.set_state(FSMAdmin.price)
        await message.reply("–£–∫–∞–∂–∏ —Ü–µ–Ω—É", reply_markup=admin_kb.button_case_admin)

async def load_price(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMIN_IDS:
        try:
            await state.update_data(price=message.text)
            data = await state.get_data()
            
            # ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö (–Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–∞—è)
            existing_records = await sqlite_db.check_existing_name(data['name'])
            if existing_records:
                await message.answer(
                    f"‚ÑπÔ∏è –£–∂–µ –µ—Å—Ç—å —É—Å–ª—É–≥–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{data['name']}'\n"
                    f"–î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–Ω—É —Å —Ç–∞–∫–∏–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º...",
                    reply_markup=admin_kb.button_case_admin
                )

            # –î–ï–ë–ê–ì: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            print(f"üéØ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î:")
            print(f"  üì∏ Photo: {data.get('photo', 'None')}")
            print(f"  üìù Name: {data.get('name', 'None')}")
            print(f"  üìÑ Description: {data.get('description', 'None')}")
            print(f"  üí∞ Price: {data.get('price', 'None')}")

            await sqlite_db.sql_add_command(state)
            await state.clear()
            await message.reply("‚úÖ –£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=admin_kb.button_case_admin)
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}", reply_markup=admin_kb.button_case_admin)
            await state.clear()

async def del_callback_run(callback_query: types.CallbackQuery):
    try:
        service_name = callback_query.data.replace('del ', '')
        await sqlite_db.sql_delete_command(service_name)
        await callback_query.answer(
            text=f'‚úÖ –û–¥–Ω–∞ –∏–∑ —É—Å–ª—É–≥ "{service_name}" —É–¥–∞–ª–µ–Ω–∞.',  # –ò–∑–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç
            show_alert=True
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            f"–û–¥–Ω–∞ –∏–∑ —É—Å–ª—É–≥ '{service_name}' –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞",
            reply_markup=None
        )
        
    except Exception as e:
        await callback_query.answer(
            text=f'‚ùå –û—à–∏–±–∫–∞: {str(e)}', 
            show_alert=True
        )

async def delete_item(message: types.Message):
    if message.from_user.id in ADMIN_IDS:
        try:
            read = await sqlite_db.sql_read2()
            
            if not read:
                await message.answer("‚ùå –í –ø—Ä–∞–π—Å–µ –Ω–µ—Ç —É—Å–ª—É–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return
                
            for ret in read:
                if ret[0]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω–æ–µ —Ñ–æ—Ç–æ
                    await message.answer_photo(
                        ret[0], 
                        caption=f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[2]}\n–¶–µ–Ω–∞ {ret[-1]}'
                    )
                else:
                    await message.answer(
                        f'üì∑ [–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ]\n{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[2]}\n–¶–µ–Ω–∞ {ret[-1]}'
                    )
                
                await message.answer(
                    text='^^^', 
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å {ret[1]}", callback_data=f'del {ret[1]}')]
                    ])
                )
            
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=admin_kb.button_case_admin)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –ø—Ä–∞–π—Å–∞: {e}")
            await message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥')

async def show_existing_services(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Å–ª—É–≥–∏"""
    if message.from_user.id in ADMIN_IDS:
        try:
            records = await sqlite_db.sql_read2()
            
            if not records:
                await message.answer("üì≠ –í –ø—Ä–∞–π—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—Å–ª—É–≥")
                return
            
            services_list = "üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Å–ª—É–≥–∏:\n\n"
            for i, ret in enumerate(records, 1):
                services_list += f"{i}. {ret[1]} - {ret[3]} —Ä—É–±.\n"
            
            await message.answer(services_list, reply_markup=admin_kb.button_case_admin)
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def register_handlers_admin(dp: Dispatcher):
    dp.message.register(make_changes_command, Command('moderator'))
    dp.message.register(cm_start, F.text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å', F.from_user.id.in_(ADMIN_IDS)) 
    dp.message.register(delete_item, F.text == '–£–¥–∞–ª–∏—Ç—å', F.from_user.id.in_(ADMIN_IDS)) 
    dp.message.register(cancel_handler, F.text.casefold() == '–æ—Ç–º–µ–Ω–∞', F.from_user.id.in_(ADMIN_IDS))
    dp.message.register(load_photo, F.photo, F.from_user.id.in_(ADMIN_IDS), FSMAdmin.photo)
    dp.message.register(load_name, F.from_user.id.in_(ADMIN_IDS), FSMAdmin.name)
    dp.message.register(load_description, F.from_user.id.in_(ADMIN_IDS), FSMAdmin.description)
    dp.message.register(load_price, F.from_user.id.in_(ADMIN_IDS), FSMAdmin.price)
    dp.callback_query.register(del_callback_run, F.data.startswith('del '))
    dp.message.register(show_existing_services, F.text == '–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥', F.from_user.id.in_(ADMIN_IDS))
    dp.message.register(exit_admin_mode, F.text == '–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∞', F.from_user.id.in_(ADMIN_IDS))
   