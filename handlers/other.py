import asyncio
import json
import string
from aiogram import types, Dispatcher, F
from aiogram.filters import Command

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
try:
    with open('cenzura.json', 'r', encoding='utf-8') as f:
        BAD_WORDS = set(json.load(f))
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(BAD_WORDS)} –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤")
except (FileNotFoundError, json.JSONDecodeError):
    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cenzura.json")
    BAD_WORDS = set()

async def check_bad_words(message: types.Message):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å /)
    if message.text and message.text.startswith('/'):
        return
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
    if not message.text:
        return
    
    # ‚úÖ –í–ê–ñ–ù–û: –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –í–°–ï–• –∫–Ω–æ–ø–æ–∫ –±–æ—Ç–∞
    all_bot_buttons = [
        # –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
        'üïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã', 'üïí –†–µ–∂–∏–º_—Ä–∞–±–æ—Ç—ã', '–†–µ–∂–∏–º_—Ä–∞–±–æ—Ç—ã',
        'üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
        'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã/–∑–∞–ø–∏—Å—å', '–ö–æ–Ω—Ç–∞–∫—Ç—ã/–∑–∞–ø–∏—Å—å', 
        'üíÖ –ü—Ä–∞–π—Å', '–ü—Ä–∞–π—Å',
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏  
        '–ó–∞–≥—Ä—É–∑–∏—Ç—å', '–£–¥–∞–ª–∏—Ç—å', '–û—Ç–º–µ–Ω–∞', '–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥', '–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∞'
    ]
    
    if message.text in all_bot_buttons:
        print(f"üîµ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–æ–ø–∫—É –±–æ—Ç–∞: {message.text}")
        return
    
    # ‚úÖ –¢–∞–∫–∂–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
    if any(button_text in message.text for button_text in ['–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã', '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–ö–æ–Ω—Ç–∞–∫—Ç—ã', '–ü—Ä–∞–π—Å', '–ó–∞–≥—Ä—É–∑–∏—Ç—å', '–£–¥–∞–ª–∏—Ç—å']):
        print(f"üîµ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏: {message.text}")
        return
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ü–µ–Ω–∑—É—Ä—É: {message.text}")
    
    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω–∑—É—Ä—ã...
    translator = str.maketrans('', '', string.punctuation + '1234567890')
    clean_text = message.text.translate(translator).lower()
    
    words = clean_text.split()
    found_bad_words = []
    
    for word in words:
        if word in BAD_WORDS:
            found_bad_words.append(word)
    
    for bad_word in BAD_WORDS:
        if bad_word in clean_text and bad_word not in found_bad_words:
            if f" {bad_word} " in f" {clean_text} ":
                found_bad_words.append(bad_word)
    
    if found_bad_words:
        print(f"üö´ –ù–∞–π–¥–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {found_bad_words}")
        try:
            await message.delete()
            warning_msg = await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ!")
            await asyncio.sleep(5)
            await warning_msg.delete()
        except Exception as e:
            await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞!")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω–∑—É—Ä—ã
async def test_cenzura(message: types.Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ü–µ–Ω–∑—É—Ä—ã"""
    test_text = "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Ü–µ–Ω–∑—É—Ä—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–æ—Ö–∏–º —Å–ª–æ–≤–æ–º –¥–ª—è —Ç–µ—Å—Ç–∞."
    
    if BAD_WORDS:
        sample_words = list(BAD_WORDS)[:3]
        test_text += f"\n\n–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {', '.join(sample_words)}"
    
    await message.answer(test_text)

async def show_bad_words(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤"""
    await message.answer(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(BAD_WORDS)} –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤")

def register_handlers_other(dp: Dispatcher):
    # ‚úÖ –í–ê–ñ–ù–û: –¶–µ–Ω–∑—É—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ü–û–°–õ–ï–î–ù–ï–ô —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    dp.message.register(check_bad_words, F.text)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dp.message.register(test_cenzura, Command('test_cenz'))
    dp.message.register(show_bad_words, Command('bad_words'))
    
    print("‚úÖ –•–µ–Ω–¥–ª–µ—Ä—ã —Ü–µ–Ω–∑—É—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã (–Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)")