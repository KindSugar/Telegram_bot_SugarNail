import sqlite3 as sq
import asyncio 

def sql_start():
    global base, cur
    base = sq.connect('nail_cool.db')
    cur = base.cursor()
    if base:
        print('Data base connected OK!')
    # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —Å –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω—ã–º ID
    base.execute('''
        CREATE TABLE IF NOT EXISTS price(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            img TEXT, 
            name TEXT, 
            description TEXT, 
            price TEXT
        )
    ''')
    base.commit()

async def check_existing_name(name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—Å–ª—É–≥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º"""
    try:
        cur.execute('SELECT name FROM price WHERE name = ?', (name,))
        return cur.fetchone() is not None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–º–µ–Ω–∏: {e}")
        return False

async def sql_add_command(state):
    try:
        data = await state.get_data()
        print(f"üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î:")
        print(f"  Photo: {data.get('photo', 'None')}")
        print(f"  Name: {data.get('name', 'None')}") 
        print(f"  Description: {data.get('description', 'None')}")
        print(f"  Price: {data.get('price', 'None')}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        photo = data.get('photo', '')
        name = data.get('name', '')
        description = data.get('description', '')
        price = data.get('price', '')
        
        # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ
        cur.execute('INSERT INTO price (img, name, description, price) VALUES (?, ?, ?, ?)', 
                    (photo, name, description, price))
        base.commit()
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ë–î")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ sql_add_command: {e}")
        raise e
        
async def sql_read(message):
    from create_bot import bot
    from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
    import asyncio
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    b1 = KeyboardButton(text='üïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã')
    b2 = KeyboardButton(text='üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ')
    b3 = KeyboardButton(text='üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã/–∑–∞–ø–∏—Å—å')
    b4 = KeyboardButton(text='üíÖ –ü—Ä–∞–π—Å')
    
    kb_menu = ReplyKeyboardMarkup(
        keyboard=[[b1, b2], [b3, b4]], 
        resize_keyboard=True
    )
    
    try:
        records = await sql_read2()
        
        if not records:
            await message.answer('üì≠ –ü—Ä–∞–π—Å –ø—É—Å—Ç', reply_markup=kb_menu)
            return
            
        sent_count = 0
        for ret in records:
            try:
                caption = f'{ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[2]}\n–¶–µ–Ω–∞: {ret[3]}'
                
                if ret[0]:  # –ï—Å–ª–∏ –µ—Å—Ç—å file_id
                    print(f"üñºÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ç–æ –¥–ª—è: {ret[1]}")
                    await message.answer_photo(ret[0], caption=caption)
                    print(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    print(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç –¥–ª—è: {ret[1]} (–Ω–µ—Ç —Ñ–æ—Ç–æ)")
                    await message.answer(f'üì∑ {caption}')
                
                sent_count += 1
                await asyncio.sleep(0.3)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {ret[1]}: {e}")
                try:
                    await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {ret[1]}\n{ret[2]}\n–¶–µ–Ω–∞: {ret[3]}')
                    sent_count += 1
                except:
                    pass
        
        # if sent_count > 0:
        #     await message.answer(f'‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ —É—Å–ª—É–≥: {sent_count}', reply_markup=kb_menu)
        # else:
        #     await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–π—Å', reply_markup=kb_menu)
            
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –ø—Ä–∞–π—Å–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∞–π—Å–∞", reply_markup=kb_menu)

async def sql_read2():
    """–ß–∏—Ç–∞–µ—Ç –≤—Å–µ —É—Å–ª—É–≥–∏ –∏–∑ –±–∞–∑—ã"""
    try:
        records = cur.execute('SELECT * FROM price').fetchall()
        read_data = []
        
        print(f"üìä –ß—Ç–µ–Ω–∏–µ {len(records)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î:")
        
        for i, ret in enumerate(records):
            print(f"\nüîç –ó–∞–ø–∏—Å—å {i+1}:")
            print(f"   ID: {ret[0]}")
            print(f"   Img: {ret[1][:50] if ret[1] else 'None'}...")
            print(f"   Name: {ret[2]}")
            print(f"   Description: {ret[3][:50] if ret[3] else 'None'}...")
            print(f"   Price: {ret[4]}")
            
            try:
                # –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê
                photo_data = ret[1] if ret[1] and isinstance(ret[1], str) else None
                
                read_data.append([
                    photo_data,  # img (photo)
                    ret[2] if len(ret) > 2 else '',  # name
                    ret[3] if len(ret) > 3 else '',  # description  
                    ret[4] if len(ret) > 4 else ''   # price
                ])
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
                read_data.append([None, ret[2], ret[3], ret[4]])
        
        print(f"\n‚úÖ –ò—Ç–æ–≥: {len(read_data)} –∑–∞–ø–∏—Å–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        return read_data
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ –ë–î: {e}")
        return []

async def sql_delete_command(name):
    """–£–¥–∞–ª—è–µ—Ç —É—Å–ª—É–≥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è —É—Å–ª—É–≥–∞
        cur.execute('SELECT id FROM price WHERE name = ?', (name,))
        services = cur.fetchall()
        
        if not services:
            raise Exception(f"–£—Å–ª—É–≥–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        
        if len(services) > 1:
            # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª—É–≥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(services)} —É—Å–ª—É–≥ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{name}', —É–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é")
        
        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —É—Å–ª—É–≥—É —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        cur.execute('DELETE FROM price WHERE name = ? LIMIT 1', (name,))
        base.commit()
        print(f"‚úÖ –£—Å–ª—É–≥–∞ '{name}' —É–¥–∞–ª–µ–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        raise e
    
async def cleanup_binary_data():
    """–û—á–∏—â–∞–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã"""
    try:
        records = cur.execute('SELECT * FROM price').fetchall()
        cleaned_count = 0
        
        for ret in records:
            if ret[0] and (not isinstance(ret[0], str) or len(ret[0]) < 10):
                # –û—á–∏—â–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                cur.execute('UPDATE price SET img = NULL WHERE name = ?', (ret[1],))
                cleaned_count += 1
                print(f"üßπ –û—á–∏—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {ret[1]}")
        
        if cleaned_count > 0:
            base.commit()
            print(f"‚úÖ –û—á–∏—â–µ–Ω–æ {cleaned_count} –∑–∞–ø–∏—Å–µ–π —Å –±–∏–Ω–∞—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        
        return cleaned_count
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
async def cleanup_binary_photos():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print("üîß –ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –≤ NULL
        cur.execute("UPDATE price SET img = NULL WHERE img IS NOT NULL")
        affected = cur.rowcount
        
        base.commit()
        print(f"‚úÖ –û—á–∏—â–µ–Ω–æ {affected} –∑–∞–ø–∏—Å–µ–π —Å —Ñ–æ—Ç–æ")
        
        return affected
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        return 0